initSidebarItems({"enum":[["AccountKeyring","Set of test accounts."],["Ed25519Keyring","Set of test accounts."],["ExecutionStrategy","Strategy for executing a call into the runtime."],["Sr25519Keyring","Set of test accounts."],["WasmExecutionMethod","Specification of different methods of executing the runtime Wasm code."]],"fn":[["construct_extrinsic","Construct an extrinsic that can be applied to the test runtime."],["construct_transfer_extrinsic","Construct a transfer extrinsic."]],"mod":[["client","Substrate Client and associated logic."],["client_ext","Client extension for tests."],["sc_client_db","Client backend that is backed by a database."],["sc_executor","A crate that provides means of executing/dispatching calls into the runtime."],["sp_consensus","Common utilities for building and using consensus engines in substrate."]],"struct":[["Backend","Disk backend."],["ExecutionExtensions","A producer of execution extensions for offchain calls."],["ExecutionStrategies","Execution strategies settings."],["GenesisParameters","Parameters of test-client builder with test-runtime."],["NativeExecutor","A generic `CodeExecutor` implementation that uses a delegate to determine wasm code equivalence and dispatch to native code when possible, falling back on `WasmExecutor` when not."],["PolkadotTestExecutor","Declare an instance of the native executor named `PolkadotTestExecutor`. Include the wasm binary as the equivalent wasm code."],["RpcHandlers","RPC handlers that can perform RPC queries."],["RpcSession","An RPC session. Used to perform in-memory RPC queries (ie. RPC queries that donâ€™t go through the HTTP or WebSockets server)."],["RpcTransactionError","An error for when the RPC call fails."],["RpcTransactionOutput","The output of an RPC transaction."],["Storage","Struct containing data needed for a storage."],["StorageChild","Child trie storage data."],["TestClientBuilder","A builder for creating a test client instance."]],"trait":[["BlockBuilderExt","Polkadot specific extensions for the [`BlockBuilder`]."],["BlockchainEventsExt","An extension trait for `BlockchainEvents`."],["ClientBlockImportExt","Extension trait for a test client around block importing."],["ClientExt","Extension trait for a test client."],["DefaultTestClientBuilderExt","A `TestClientBuilder` with default backend and executor."],["GenesisInit","A genesis storage initialization trait."],["InitPolkadotBlockBuilder","An extension for the test client to initialize a Polkadot specific block builder."],["RpcHandlersExt","An extension trait for `RpcHandlers`."],["SyncCryptoStore","Sync version of the CryptoStore"],["TestClientBuilderExt","A `test-runtime` extensions to `TestClientBuilder`."]],"type":[["BadBlocks","Known bad block hashes."],["Client","The client type being used by the test service."],["Executor","Test client executor."],["ForkBlocks","Expected hashes of blocks at given heights."],["FullBackend",""],["LightBackend","Test client light database backend."],["LongestChain","`LongestChain` type for the test runtime/client."],["SyncCryptoStorePtr","A pointer to a keystore."],["TestClientBuilder","Test client builder for Polkadot."]]});