initSidebarItems({"attr":[["overlord",""]],"enum":[["AllMessages","Generated message type wrapper"],["Event","An event from outside the overseer scope, such as the substrate framework or user interaction."],["ExternalRequest","Some request from outer world."],["FromOverseer","A message type that a subsystem receives from an overseer. It wraps signals from an overseer and messages that are circulating between subsystems."],["Handle","A handle used to communicate with the `Overseer`."],["LeafStatus","The status of an activated leaf."],["OverseerSignal","Signals sent by an overseer to a subsystem."],["SubsystemError","An error type that describes faults that may happen"],["ToOverseer","A type of messages that are sent from [`Subsystem`] to [`Overseer`]."]],"fn":[["forward_events","Glues together the [`Overseer`] and `BlockchainEvents` by forwarding import and finality notifications into the [`OverseerHandle`]."],["spawn","Spawn task of kind `self` using spawner `S`."]],"struct":[["ActivatedLeaf","Activated leaf."],["ActiveLeavesUpdate","Changes in the set of active leaves: the parachain heads which we care to work on."],["AllSubsystems","This struct is passed as an argument to create a new instance of an [`Overseer`]."],["BlockInfo","An event telling the `Overseer` on the particular block that has been imported or finalized."],["ChannelsOut","Collection of channels to the individual subsystems."],["MessagePacket","A wrapping type for messages."],["OverseenSubsystem","A subsystem that the overseer oversees."],["Overseer","The overseer."],["OverseerBuilder",""],["OverseerSubsystemContext","A context type that is given to the `Subsystem` upon spawning. It can be used by `Subsystem` to communicate with other `Subsystem`s or to spawn itâ€™s `SubsystemJob`s."],["OverseerSubsystemSender","Connector to send messages towards all subsystems, while tracking the which signals where already received."],["SignalsReceived","Watermark to track the received signals."],["SubsystemInstance","A running instance of some `Subsystem`."],["SubsystemMeterReadouts","Set of readouts of the `Meter`s of a subsystem."],["SubsystemMeters","Collection of meters related to a subsystem."]],"trait":[["HeadSupportsParachains","Whether a header supports parachain consensus or not."],["MapSubsystem","A helper trait to map a subsystem to smth. else."],["SpawnNamed","Something that can spawn tasks (blocking and non-blocking) with an assigned name."],["Subsystem","A trait that describes the `Subsystem`s that can run on the `Overseer`."],["SubsystemContext","A context type that is given to the [`Subsystem`] upon spawning. It can be used by [`Subsystem`] to communicate with other [`Subsystem`]s or spawn jobs."],["SubsystemSender","Sender end of a channel to interface with a subsystem."],["TaskKind","Task kind to launch."],["TimeoutExt","Extends `Future` to allow time-limited futures."]],"type":[["OverseerHandle","Handle for an overseer."],["SubsystemIncomingMessages","Incoming messages from both the bounded and unbounded channel."],["SubsystemResult","Ease the use of subsystem errors."]]});